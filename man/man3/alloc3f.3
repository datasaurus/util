.\" 
.\" Copyright (c) 2011, Gordon D. Carrie. All rights reserved.
.\" 
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 
.\"     * Redistributions of source code must retain the above copyright
.\"     notice, this list of conditions and the following disclaimer.
.\"     * Redistributions in binary form must reproduce the above copyright
.\"     notice, this list of conditions and the following disclaimer in the
.\"     documentation and/or other materials provided with the distribution.
.\" 
.\" THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
.\" "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
.\" LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
.\" A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
.\" HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
.\" SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
.\" TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
.\" PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
.\" LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
.\" NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
.\" SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
.\" 
.\" Please address questions and feedback to dev0@trekix.net
.\" 
.\" $Revision: 1.13 $ $Date: 2011/11/28 16:11:23 $
.\"
.TH alloc3f 3 "Dynamic three dimensional allocators"
.SH NAME
Calloc3F, Free3F, \- dynamic allocators for three dimensional arrays of floats
.SH SYNOPSIS
.nf
\fB#include "alloc3f.h"\fP
\fBfloat ***Calloc3F(size_t\fP \fIkmax\fP, \fBsize_t\fP \fIjmax\fP, \fBsize_t\fP \fIimax\fP);
\fBvoid Free3F(float ***\fP\fId\fP);
.fi
.SH DESCRIPTION
These allocators create three dimensional arrays of float values.

\fBCalloc3F\fP allocates a three dimensional array of float values.  If the
return value is assigned to \fId\fP, then the highest index of the array
is \fId\fP[\fIkmax\fP-1][\fIjmax\fP-1][\fIimax\fP-1].
\fId\fP[\fB0\fP][\fB0\fP] is a contiguous block of
\fIkmax\fP \fB*\fP \fIjmax\fP \fB*\fP \fIimax\fP floats.

Each dimension array in \fId\fP is terminated with a pointer to the end of
the next dimension.  In other words,
\fBd\fP[\fIkmax\fP] points to \fBd\fP[\fIkmax\fP-1][\fIjmax\fP], and
\fBd\fP[\fIkmax\fP-1][\fIjmax\fP] points to
\fBd\fP[\fIkmax\fP-1][\fIjmax\fP-1][\fIimax\fP].
Also, \fBd\fP[\fIkmax\fP+1] is \fBNULL\fP.
This facilitates array traversal with minimal indexing.  The following loops
are equivalent.

.nf
    for (k = 0; k < kmax; k++)
        for (j = 0; j < jmax; j++)
            for (i = 0; i < imax; i++)
                use(dat[k][j][i]);

    for (p3 = dat; p3[1]; p3++)
        for (p2 = p3[0]; p2 < p3[1]; p2++)
            for (p = p2[0]; p < p2[1]; p++)
                use(*p);
.fi

The second loop might be faster for some compilers and options.

If something goes wrong, the function prints an error message to stderr,
and returns \fBNULL\fP.

\fBFree3F\fP frees all memory associated with \fId\fP,
which should be a return value of \fBmalloc3f\fP.
.SH SEE ALSO
\fBalloc2f\fP (3), \fBalloc4f\fP (3), \fBerr_msg\fP (3), \fBallocfvi\fP (1).
.SH AUTHOR
Gordon Carrie (dev0@trekix.net)
