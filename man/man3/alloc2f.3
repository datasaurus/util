.\" 
.\" Copyright (c) 2008 Gordon D. Carrie
.\" All rights reserved
.\" 
.\" Please address questions and feedback to dev0@trekix.net
.\" 
.\" $Revision: 1.8 $ $Date: 2009/09/25 21:33:14 $
.\"
.TH alloc2f 3 "Dynamic two dimensional allocator"
.SH NAME
Calloc2F, Free2F, \- dynamic allocators for two dimensional arrays of floats
.SH SYNOPSIS
.nf
\fB#include "allocf.h"\fP
\fBfloat **Calloc2F(size_t\fP \fIjmax\fP, \fBsize_t\fP \fIimax\fP);
\fBvoid Free2F(float **\fP\fId\fP);
.fi
.SH DESCRIPTION
These allocators create two dimensional arrays of float values.

\fBCalloc2F\fP allocates a two dimensional array of float values dimensioned
\fIjmax\fP by \fIimax\fP.  If the return value is assigned to \fId\fP, then
the highest index of the array is \fId\fP[\fIjmax\fP-1][\fIimax\fP-1].
\fId\fP[\fB0\fP] is a contiguous block of \fIjmax\fP \fB*\fP \fIimax\fP
float values.

The dimension array in \fId\fP is terminated with a pointer to the end of
the value array.  In other words, \fId\fP[\fIjmax\fP]  points to
\fId\fP[\fIjmax-1\fP][\fIimax\fP].  Also \fId\fP[\fIjmax\fP+1] is \fBNULL\fP.
This facilitates array traversal with minimal indexing.  The following loops
are equivalent.

.nf
    for (j = 0; j < jmax; j++)
        for (i = 0; i < imax; i++)
            use(dat[j][i]);

    for (p2 = dat; p2[1]; p2++)
        for (p = p2[0]; p < p2[1]; p++)
            use(*p);
.fi

The second loop might be faster for some compilers and options.

If something goes wrong, the function generates an error message that can
be retrieved with a call to \fBErr_Get\fP, and returns \fBNULL\fP.

\fBFree2F\fP frees all memory associated with \fId\fP,
which should be a return value of \fBCalloc2F\fP.
.SH SEE ALSO
\fBalloc3f\fP (3), \fBalloc4f\fP (3), \fBerr_msg\fP (3), \fBallocfvi\fP (1).
.SH AUTHOR
Gordon Carrie (dev0@trekix.net)
