.\" 
.\" Copyright (c) 2011, Gordon D. Carrie. All rights reserved.
.\" 
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 
.\"     * Redistributions of source code must retain the above copyright
.\"     notice, this list of conditions and the following disclaimer.
.\"     * Redistributions in binary form must reproduce the above copyright
.\"     notice, this list of conditions and the following disclaimer in the
.\"     documentation and/or other materials provided with the distribution.
.\" 
.\" THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
.\" "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
.\" LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
.\" A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
.\" HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
.\" SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
.\" TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
.\" PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
.\" LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
.\" NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
.\" SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
.\" 
.\" Please address questions and feedback to dev0@trekix.net
.\" 
.\" $Revision: 1.2 $ $Date: 2011/01/03 21:03:19 $
.\"
.TH dyn_alloc 3 "Dynamic allocator"
.SH NAME
dyn_alloc \- dynamic allocator
.SH SYNOPSIS
.nf
\fB#include "dyn_alloc.h"\fP
\fBvoid\fP *\fBdyn_alloc\fP(\fBvoid\fP *\fIbase\fP, \fBsize_t\fP *\fIsz_p\fP, \fBsize_t\fP \fIoffset\fP, \fBvoid\fP *\fIsrc\fP,
	\fBsize_t\fP \fIlen\fP, \fBsize_t\fP \fIextra\fP)
.fi
.SH DESCRIPTION
\fBdyn_alloc\fP copies \fIlen\fP bytes from \fIsrc\fP to
\fIbase\fP\ +\ \fIoffset\fP. \fIbase\fP should have space for *\fIsz\fP bytes.
If \fIoffset\fP is too large for pointer arithmetic, the function returns
\fBNULL\fP with \fBerrno\fP set to \fBEOVERFLOW\fP. If
\fIoffset\fP\ +\ \fIlen\fP <= *\fIsz\fP, the function just copies the bytes and
returns \fIbase\fP. If \fIoffset\fP\ +\ \fIlen\fP > *\fIsz\fP, the function
attempts to change the allocation at \fIbase\fP to
\fIoffset\fP\ +\ \fIlen\fP\ +\ \fIextra\fP bytes with a call to \fBREALLOC\fP.
If \fBREALLOC\fP succeeds, it copies the bytes to the possibly new address, and
stores the new allocation size at \fIsz_p\fP. 
If \fBREALLOC\fP is called, this function returns the return value from
\fBREALLOC\fP, which might also set \fBerrno\fP.
.SH SEE ALSO
\fBalloc\fP (3), \fBrealloc\fP (3), \fBerrno\fP (2)
.SH AUTHOR
Gordon Carrie (dev0@trekix.net)
